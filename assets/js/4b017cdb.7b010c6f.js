"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[5128],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},70468:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"best-practices/traffic-routing-istio-api","title":"Traffic Routing with Istio","description":"FEATURE STATE: Kruise Rollout v0.5.0","source":"@site/rollouts/best-practices/traffic-routing-istio-api.md","sourceDirName":"best-practices","slug":"/best-practices/traffic-routing-istio-api","permalink":"/rollouts/best-practices/traffic-routing-istio-api","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"ChrisLiu","lastUpdatedAt":1742897500000,"frontMatter":{},"sidebar":"rollouts","previous":{"title":"Extensible Traffic Routing Based on Lua Script","permalink":"/rollouts/developer-manuals/custom-network-provider"}}');var i=o(74848),s=o(28453);const a={},r="Traffic Routing with Istio",l={},c=[{value:"A Complete Release Process",id:"a-complete-release-process",level:2},{value:"Deploy deployment <code>workload-demo</code> and service <code>service-demo</code>",id:"deploy-deployment-workload-demo-and-service-service-demo",level:3},{value:"Deploy VirtualService <code>vs-demo</code> which routes traffic to <code>service-demo</code>",id:"deploy-virtualservice-vs-demo-which-routes-traffic-to-service-demo",level:3},{value:"Deploy Rollout <code>rollouts-demo</code>",id:"deploy-rollout-rollouts-demo",level:3},{value:"Upgrade deployment <code>workload-demo</code>",id:"upgrade-deployment-workload-demo",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"traffic-routing-with-istio",children:"Traffic Routing with Istio"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"FEATURE STATE:"})," Kruise Rollout v0.5.0"]}),"\n",(0,i.jsx)(n.p,{children:"This page is a demo to show how to utilize Kruise Rollout to do traffic routing with Istio."}),"\n",(0,i.jsx)(n.h2,{id:"a-complete-release-process",children:"A Complete Release Process"}),"\n",(0,i.jsxs)(n.h3,{id:"deploy-deployment-workload-demo-and-service-service-demo",children:["Deploy deployment ",(0,i.jsx)(n.code,{children:"workload-demo"})," and service ",(0,i.jsx)(n.code,{children:"service-demo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: service-demo\nspec:\n  ports:\n  - port: 80\n    name: http\n  selector:\n    app: nginx\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: workload-demo\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        env:\n        - name: version\n          value: base\n        ports:\n        - containerPort: 80\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"deploy-virtualservice-vs-demo-which-routes-traffic-to-service-demo",children:["Deploy VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"})," which routes traffic to ",(0,i.jsx)(n.code,{children:"service-demo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n    - "*"\n  http:\n  - route:\n      - destination:\n          host: service-demo\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"deploy-rollout-rollouts-demo",children:["Deploy Rollout ",(0,i.jsx)(n.code,{children:"rollouts-demo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: rollouts.kruise.io/v1beta1\nkind: Rollout\nmetadata:\n  name: rollouts-demo\nspec:\n  workloadRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: workload-demo\n  strategy:\n    canary:\n      steps:\n      - replicas: 1\n        matches:\n        - headers:\n          - type: Exact\n            name: version\n            value: canary\n      - traffic: 50%\n        replicas: 50%\n      - traffic: 80%\n        replicas: 80%\n      trafficRoutings:\n      - service: mocka\n        customNetworkRefs:\n        - apiVersion: networking.istio.io/v1alpha3\n          kind: VirtualService\n          name: vs-demo\n"})}),"\n",(0,i.jsx)(n.p,{children:"When you apply a new revision for workload-demo, Kruise Rollout will modify configuration of VirtualService to comply with release strategies:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A new canary Deployment will be created, and its replicas is 1. Traffic with header ",(0,i.jsx)(n.code,{children:"version=canary"})," will be routed to the new-version pods while other traffic will be routed to stable-version pods."]}),"\n",(0,i.jsx)(n.li,{children:'Update the replicas of canary Deployment to "50%" of workload-demo and route 50% of traffic to new-version pods.'}),"\n",(0,i.jsx)(n.li,{children:'Update the replicas of canary Deployment to "80%" of workload-demo and route 80% of traffic to new-version pods.'}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"upgrade-deployment-workload-demo",children:["Upgrade deployment ",(0,i.jsx)(n.code,{children:"workload-demo"})]}),"\n",(0,i.jsxs)(n.p,{children:["Run the following command to update env ",(0,i.jsx)(n.code,{children:"version: base"})," to ",(0,i.jsx)(n.code,{children:"version: canary"})," to start release."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'$ kubectl patch deployment workload-demo -p \\\n\'{"spec":{"template":{"spec":{"containers":[{"name":"nginx", "env":[{"name":"version", "value":"canary"}]}]}}}}\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"Wait a while, Kruise Rollout will do the following work for you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pause the base Deployment."}),"\n",(0,i.jsxs)(n.li,{children:["Create a new Deployment with env ",(0,i.jsx)(n.code,{children:"version: canary"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create a new Service ",(0,i.jsx)(n.code,{children:"service-demo-canary"})," to route traffic to new-version pods."]}),"\n",(0,i.jsxs)(n.li,{children:["Update VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"})," to do traffic routing."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["After the first release step is done, check VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"})," and you will see:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  # route traffic with header version=canary to new-version pods\n  - match:\n    - headers:\n        version:\n          exact: canary\n    route:\n    - destination:\n        host: service-demo-canary\n  - route:\n    - destination:\n        host: service-demo\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"kubectl-kruise rollout approve rollout/rollouts-demo -n default"})," to start second release step. After the second release step is done, check VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"})," and you will see:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  - route:\n    - destination:\n        host: service-demo\n      weight: 50\n    - destination:\n        host: service-demo-canary\n      weight: 50 # route 50% traffic to new-version pods\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"kubectl-kruise rollout approve rollout/rollouts-demo -n default"})," to start third release step. After the third release step is done, check VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"})," and you will see:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  - route:\n    - destination:\n        host: service-demo\n      weight: 20\n    - destination:\n        host: service-demo-canary\n      weight: 80 # route 80% traffic to new-version pods\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"kubectl-kruise rollout approve rollout/rollouts-demo -n default"})," to complete the release, Kruise Rollout will do some finalising work:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Delete the canary Deployment."}),"\n",(0,i.jsxs)(n.li,{children:["Delete the canary Service ",(0,i.jsx)(n.code,{children:"service-demo-canary"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Resume the base Deployment."}),"\n",(0,i.jsxs)(n.li,{children:["Restore the VirtualService ",(0,i.jsx)(n.code,{children:"vs-demo"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After that, the release is done and your are ready to use the new-version service."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);