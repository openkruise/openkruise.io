"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[683],{16125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"user-manuals/service-qualities","title":"Service Qualities","description":"Feature overview","source":"@site/kruisegame/user-manuals/service-qualities.md","sourceDirName":"user-manuals","slug":"/user-manuals/service-qualities","permalink":"/kruisegame/user-manuals/service-qualities","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Zhen Zhang","lastUpdatedAt":1751855500000,"frontMatter":{},"sidebar":"kruisegame","previous":{"title":"Startup Sequence Control","permalink":"/kruisegame/user-manuals/container-startup-sequence-control"},"next":{"title":"Network","permalink":"/kruisegame/user-manuals/network"}}');var s=n(74848),i=n(28453);const r={},o="Service Qualities",c={},l=[{value:"Feature overview",id:"feature-overview",level:2},{value:"Instructions for use",id:"instructions-for-use",level:2},{value:"Example",id:"example",level:2},{value:"Usage Scenarios",id:"usage-scenarios",level:2},{value:"Set the O&amp;M status of idle game servers to WaitToBeDeleted",id:"set-the-om-status-of-idle-game-servers-to-waittobedeleted",level:3},{value:"Set the O&amp;M status of unhealthy game servers to Maintaining",id:"set-the-om-status-of-unhealthy-game-servers-to-maintaining",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"service-qualities",children:"Service Qualities"})}),"\n",(0,s.jsx)(t.h2,{id:"feature-overview",children:"Feature overview"}),"\n",(0,s.jsx)(t.p,{children:"Because a game server is stateful, a game server usually exists in a pod in the form of a rich container, and multiple processes are managed in a pod in a centralized manner.\nHowever, the processes in a pod vary in importance. If an error occurs in a lightweight process, you may not want to delete and recreate the entire pod. Therefore, the native liveness probe feature of Kubernetes does not suit gaming scenarios.\nIn OpenKruiseGame, the service quality of game servers is defined by game developers. Game developers can set handling actions based on the statuses of game servers. The custom service quality feature is a combination of probing and action. This combination helps automatically deal with various issues related to game server statuses."}),"\n",(0,s.jsx)(t.h2,{id:"instructions-for-use",children:"Instructions for use"}),"\n",(0,s.jsxs)(t.p,{children:["Use custom quality of service features via ",(0,s.jsx)(t.code,{children:"GameServerSet.Spec.ServiceQualities"}),". Its detailed data structure is as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'type GameServerSetSpec struct {\n\t// ...\n\tServiceQualities     []ServiceQuality   `json:"serviceQualities,omitempty"`\n\t// ...\n}\n\ntype ServiceQuality struct {\n\tcorev1.Probe  `json:",inline"`\n\tName          string `json:"name"`\n\tContainerName string `json:"containerName,omitempty"`\n\t// Whether to make GameServerSpec not change after the ServiceQualityAction is executed.\n\t// When Permanent is true, regardless of the detection results, ServiceQualityAction will only be executed once.\n\t// When Permanent is false, ServiceQualityAction can be executed again even though ServiceQualityAction has been executed.\n\tPermanent            bool                   `json:"permanent"`\n\tServiceQualityAction []ServiceQualityAction `json:"serviceQualityAction,omitempty"`\n}\n\ntype ServiceQualityAction struct {\n\tState bool `json:"state"`\n\t// Result indicate the probe message returned by the script.\n\t// When Result is defined, it would exec action only when the according Result is actually returns.\n\tResult         string `json:"result,omitempty"`\n\tGameServerSpec `json:",inline"`\n\tAnnotations    map[string]string `json:"annotations,omitempty"`\n\tLabels         map[string]string `json:"labels,omitempty"`\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Users implement a detection script to reveal the business/operation and maintenance status in the container to the Kubernetes GameServer object.\nSupports multiple result output: the exit code 0 in the script corresponds to the State of ServiceQualityAction is true; the exit code 1 in the script corresponds to the State of ServiceQualityAction is false; the echo string in the script corresponds to the Result value of ServiceQualityAction.\nWhen State and Result are satisfied at the same time, GameServer's GameServerSpec/Annotations/Labels will be set according to the parameters filled in by the user. GameServerSpec includes OpsState/NetworkDisabled, etc. The specific fields are as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'type GameServerSpec struct {\n\tOpsState         OpsState            `json:"opsState,omitempty"`\n\tUpdatePriority   *intstr.IntOrString `json:"updatePriority,omitempty"`\n\tDeletionPriority *intstr.IntOrString `json:"deletionPriority,omitempty"`\n\tNetworkDisabled  bool                `json:"networkDisabled,omitempty"`\n\t// Containers can be used to make the corresponding GameServer container fields\n\t// different from the fields defined by GameServerTemplate in GameServerSetSpec.\n\tContainers []GameServerContainer `json:"containers,omitempty"`\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.p,{children:"Let\u2019s take an example to see how to realize multiple status awareness of the game server through a detection script."}),"\n",(0,s.jsx)(t.p,{children:'When making a container image, write a script to detect the status of the container. The sample script probe.sh will detect whether the gate process and data process exist.\nWhen the gate process does not exist, it outputs "gate" and exits normally; when the data process does not exist, it outputs "data" and exits normally; when there is no exception, it exits with exit code 1.'}),"\n",(0,s.jsx)(t.p,{children:"The probe.sh script is a detection script within the business container, which is periodically called by OKG.\nIts principle is similar to the Kubernetes native liveness/readiness probes. In the aforementioned scenario, the pseudocode for probe.sh is as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'#!/bin/bash\n\ngate=$(ps -ef | grep gate | grep -v grep | wc -l)\ndata=$(ps -ef | grep data | grep -v grep | wc -l)\n\nif [ $gate != 1 ]\nthen\n  echo "gate"\n  exit 0\nfi\n\nif [ $data != 1 ]\nthen\n  echo "data"\n  exit 0\nfi\n\nexit 1\n'})}),"\n",(0,s.jsx)(t.p,{children:"The corresponding yaml of GameServerSet is as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'apiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: minecraft\n  namespace: default\nspec:\n  replicas: 3\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n      maxUnavailable: 100%\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-beijing.aliyuncs.com/chrisliu95/minecraft-demo:probe-v0\n          name: minecraft\n  serviceQualities:\n    - name: healthy\n      containerName: minecraft\n      permanent: false\n      exec:\n        command: ["bash", "./probe.sh"]\n      serviceQualityAction:\n        - state: true\n          result: gate\n          opsState: GateMaintaining\n        - state: true\n          result: data\n          opsState: DataMaintaining\n        - state: false\n          opsState: None\n'})}),"\n",(0,s.jsx)(t.p,{children:"After the deployment is completed, 3 Pods and GameServer are generated"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl get gs\nNAME          STATE   OPSSTATE   DP    UP    AGE\nminecraft-0   Ready   None       0     0     14s\nminecraft-1   Ready   None       0     0     14s\nminecraft-2   Ready   None       0     0     14s\n\nkubectl get po\nNAME          READY   STATUS    RESTARTS   AGE\nminecraft-0   1/1     Running   0          15s\nminecraft-1   1/1     Running   0          15s\nminecraft-2   1/1     Running   0          15s\n"})}),"\n",(0,s.jsx)(t.p,{children:"Enter the minecraft-0 container, simulate the gate process failure, and kill its corresponding process number."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl exec -it minecraft-0 /bin/bash\n\n/data# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 03:00 ?        00:00:00 /bin/bash ./start.sh\nroot           7       1  0 03:00 ?        00:00:00 /bin/bash ./gate.sh\nroot           8       1  0 03:00 ?        00:00:00 /bin/bash ./data.sh\nroot           9       1 99 03:00 ?        00:00:24 java -jar /minecraft_server.\n...\n\n/data# kill -9 7\n\n/data# exit\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the opsState of the current gs, which has changed to GateMaintaining"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"\nkubectl get gs\nNAME          STATE   OPSSTATE          DP    UP    AGE\nminecraft-0   Ready   GateMaintaining   0     0     2m14s\nminecraft-1   Ready   None              0     0     2m14s\nminecraft-2   Ready   None              0     0     2m14s\n"})}),"\n",(0,s.jsx)(t.p,{children:"Enter the minecraft-1 container, simulate the data process failure, and kil its corresponding process number."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl exec -it minecraft-1 /bin/bash\n\n/data# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 03:00 ?        00:00:00 /bin/bash ./start.sh\nroot           7       1  0 03:00 ?        00:00:00 /bin/bash ./gate.sh\nroot           8       1  0 03:00 ?        00:00:00 /bin/bash ./data.sh\nroot           9       1 99 03:00 ?        00:00:24 java -jar /minecraft_server.\n...\n\n/data# kill -9 8\n\n/data# exit\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the opsState of the current gs, which has changed to DataMaintaining"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl get gs\nNAME          STATE   OPSSTATE          DP    UP    AGE\nminecraft-0   Ready   GateMaintaining   0     0     3m10s\nminecraft-1   Ready   DataMaintaining   0     0     3m10s\nminecraft-2   Ready   None              0     0     3m10s\n"})}),"\n",(0,s.jsx)(t.p,{children:"Enter minecraft-0 and minecraft-1 respectively, and manually pull up the hung process:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl exec -it minecraft-0 /bin/bash\n\n/data# bash ./gate.sh &\n\n/data# exit\n\nkubectl exec -it minecraft-1 /bin/bash\n\n/data# bash ./data.sh &\n\n/data# exit\n"})}),"\n",(0,s.jsx)(t.p,{children:"At this time, the operation and maintenance status of gs has returned to None."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"kubectl get gs\nNAME          STATE   OPSSTATE   DP    UP    AGE\nminecraft-0   Ready   None       0     0     5m6s\nminecraft-1   Ready   None       0     0     5m6s\nminecraft-2   Ready   None       0     0     5m6s\n"})}),"\n",(0,s.jsx)(t.h2,{id:"usage-scenarios",children:"Usage Scenarios"}),"\n",(0,s.jsx)(t.h3,{id:"set-the-om-status-of-idle-game-servers-to-waittobedeleted",children:"Set the O&M status of idle game servers to WaitToBeDeleted"}),"\n",(0,s.jsx)(t.p,{children:"Deploy a GameServerSet that contains the custom service quality field."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'cat <<EOF | kubectl apply -f -\napiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: minecraft\n  namespace: default\nspec:\n  replicas: 3\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/gs-demo/gameserver:idle\n          name: minecraft\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n      maxUnavailable: 100%\n  serviceQualities: # Set the service quality named idle.\n    - name: idle\n      containerName: minecraft\n      permanent: false\n      # Similar to the native probe feature, a script is executed to probe whether a game server is idle, that is, whether no player joins the game server.\n      exec:\n        command: ["bash", "./idle.sh"]\n      serviceQualityAction:\n          # If no player joins the game server, the O&M status of the game server is set to WaitToBeDeleted.\n        - state: true\n          opsState: WaitToBeDeleted\n          # If players join the game server, the O&M status of the game server is set to None.\n        - state: false\n          opsState: None\nEOF\n'})}),"\n",(0,s.jsx)(t.p,{children:"After the deployment is completed, because no players have joined the game servers, all game servers are idle and their O&M status is WaitToBeDeleted."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"kubectl get gs\nNAME          STATE   OPSSTATE          DP    UP\nminecraft-0   Ready   WaitToBeDeleted   0     0\nminecraft-1   Ready   WaitToBeDeleted   0     0\nminecraft-2   Ready   WaitToBeDeleted   0     0\n"})}),"\n",(0,s.jsx)(t.p,{children:"When a player accesses the game server minecraft-1, the O&M status of the game server changes to None."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"kubectl get gs\nNAME          STATE   OPSSTATE          DP    UP\nminecraft-0   Ready   WaitToBeDeleted   0     0\nminecraft-1   Ready   None              0     0\nminecraft-2   Ready   WaitToBeDeleted   0     0\n"})}),"\n",(0,s.jsx)(t.p,{children:"In this case, if game servers are scaled in, game servers other than minecraft-1 are deleted first."}),"\n",(0,s.jsx)(t.h3,{id:"set-the-om-status-of-unhealthy-game-servers-to-maintaining",children:"Set the O&M status of unhealthy game servers to Maintaining"}),"\n",(0,s.jsx)(t.p,{children:"Deploy a GameServerSet that contains the custom service quality field."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'cat <<EOF | kubectl apply -f -\napiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: demo-gs\n  namespace: default\nspec:\n  replicas: 3\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/gs-demo/gameserver:healthy\n          name: minecraft\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n      maxUnavailable: 100%\n  serviceQualities: # Set the service quality named healthy.\n    - name: idle\n      containerName: minecraft\n      permanent: false\n      # Similar to the native probe feature, a script is executed to probe whether a game server is healthy.\n      exec:\n        command: ["bash", "./healthy.sh"]\n      serviceQualityAction:\n          # If the game server is healthy, the O&M status of the game server is set to None.\n        - state: true\n          opsState: None\n          # If the game server is unhealthy, the O&M status of the game server is set to Maintaining.\n        - state: false\n          opsState: Maintaining\nEOF\n'})}),"\n",(0,s.jsx)(t.p,{children:"After the deployment is completed, because all the game servers are healthy, the O&M status of all the game servers is None."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"kubectl get gs\nNAME        STATE   OPSSTATE   DP    UP\ndemo-gs-0   Ready   None       0     0\ndemo-gs-1   Ready   None       0     0\ndemo-gs-2   Ready   None       0     0\n"})}),"\n",(0,s.jsx)(t.p,{children:"Simulate a failure of a process on the game server demo-gs-0. Then, the O&M status of this game server changes to Maintaining."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"kubectl get gs\nNAME        STATE   OPSSTATE     DP    UP\ndemo-gs-0   Ready   Maintaining  0     0\ndemo-gs-1   Ready   None         0     0\ndemo-gs-2   Ready   None         0     0\n"})}),"\n",(0,s.jsxs)(t.p,{children:['In this case, the game server controller sends the event "GameServer demo-gs-0 Warning". You can use the ',(0,s.jsx)(t.a,{href:"https://github.com/AliyunContainerService/kube-eventer",children:"kube-event project"})," to implement exception notification."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(86032).A+"",width:"558",height:"223"})}),"\n",(0,s.jsx)(t.p,{children:"In addition, OpenKruiseGame will integrate the tools that are used to automatically troubleshoot and recover game servers in the future to enhance automated O&M capabilities for game servers."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},86032:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/warning-ding-5b4cdf9f5265811b0852883ce42976b1.png"}}]);