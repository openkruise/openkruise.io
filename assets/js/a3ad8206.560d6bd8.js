"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[5948],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(96540);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}},45961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var o=n(81268),s=n(74848),a=n(28453);const i={slug:"openkruise-1.2",title:"OpenKruise v1.2, new PersistentPodState feature to achieve IP retention",authors:["FillZpp"],tags:["release"]},r=void 0,l={authorsImageUrls:[void 0]},d=[{value:"What&#39;s new?",id:"whats-new",level:2},{value:"1. New CRD and Controller: PersistentPodState",id:"1-new-crd-and-controller-persistentpodstate",level:3},{value:"2. CloneSet percentage partition calculation changed (<strong>breaking</strong>), and a new field in its status",id:"2-cloneset-percentage-partition-calculation-changed-breaking-and-a-new-field-in-its-status",level:3},{value:"3. Able to mark Pod not-ready for lifecycle hook",id:"3-able-to-mark-pod-not-ready-for-lifecycle-hook",level:3},{value:"4. PodUnavailableBudget supports any custom workloads and performance optimization",id:"4-podunavailablebudget-supports-any-custom-workloads-and-performance-optimization",level:3},{value:"5. Other changes",id:"5-other-changes",level:3},{value:"Get Involved",id:"get-involved",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"We\u2019re pleased to announce the release of OpenKruise 1.2, which is a CNCF Sandbox level project."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://openkruise.io",children:"OpenKruise"})," is an extended component suite for Kubernetes, which mainly focuses on application automations, such as deployment, upgrade, ops and availability protection. Mostly features provided by OpenKruise are built primarily based on CRD extensions. They can work in pure Kubernetes clusters without any other dependences."]}),"\n",(0,s.jsx)(t.h2,{id:"whats-new",children:"What's new?"}),"\n",(0,s.jsxs)(t.p,{children:["In release v1.2, OpenKruise provides a new CRD named ",(0,s.jsx)(t.code,{children:"PersistentPodState"}),", some new fields of CloneSet status and lifecycle hook, and optimization of PodUnavailableBudget."]}),"\n",(0,s.jsx)(t.p,{children:"Here we are going to introduce some changes of it."}),"\n",(0,s.jsx)(t.h3,{id:"1-new-crd-and-controller-persistentpodstate",children:"1. New CRD and Controller: PersistentPodState"}),"\n",(0,s.jsx)(t.p,{children:"With the development of cloud native, more and more companies start to deploy stateful services (e.g., Etcd, MQ) using Kubernetes. K8S StatefulSet is a workload for managing stateful services, and it considers the deployment characteristics of stateful services in many aspects.\nHowever, StatefulSet persistent only limited pod state, such as Pod Name is ordered and unchanging, PVC persistence, and can not cover other states, e.g. Pod IP retention, priority scheduling to previously deployed Nodes, etc. Typical Cases:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Service Discovery Middleware services are exceptionally sensitive to the Pod IP after deployment, requiring that the IP cannot be changed."})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Database services persist data to the host disk, and changes to the Node to which they belong will result in data loss."})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In response to the above description, by customizing ",(0,s.jsx)(t.code,{children:"PersistentPodState"}),' CRD, Kruise is able to persistent other states of the Pod, such as "IP Retention".']}),"\n",(0,s.jsxs)(t.p,{children:["An object of ",(0,s.jsx)(t.code,{children:"PersistentPodState"})," may look like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: PersistentPodState\nmetadata:\n  name: echoserver\n  namespace: echoserver\nspec:\n  targetRef:\n    # Native k8s or kruise StatefulSet\n    # only support StatefulSet\n    apiVersion: apps.kruise.io/v1beta1\n    kind: StatefulSet\n    name: echoserver\n  # required node affinity. As follows, Pod rebuild will force deployment to the same zone\n  requiredPersistentTopology:\n    nodeTopologyKeys:\n      - failure-domain.beta.kubernetes.io/zone[,other node labels]\n  # preferred node affinity. As follows, Pod rebuild will preferred deployment to the same node\n  preferredPersistentTopology:\n    - preference:\n        nodeTopologyKeys:\n          - kubernetes.io/hostname[,other node labels]\n      # int [1, 100]\n      weight: 100\n"})}),"\n",(0,s.jsxs)(t.p,{children:['"IP Retention" should be a common requirement for K8S deployments of stateful services. It does not mean "Specified Pod IP", but requires that the Pod IP does not change after the first deployment, either by service release or by machine eviction.\nTo achieve this, we need the K8S network component to support Pod IP retention and the ability to keep the IP as unchanged as possible.\nIn this article, we have modified the Host-local plugin in the flannel network component so that it can achieve the effect of keeping the Pod IP unchanged under the same Node.\nRelated principles will not be stated here, please refer to the code: ',(0,s.jsx)(t.a,{href:"https://github.com/openkruise/samples/tree/master/containernetworking/plugins",children:"host-local"}),"."]}),"\n",(0,s.jsx)(t.p,{children:'IP retention seems to be supported by the network component, how is it related with PersistentPodState?\nWell, there are some limitations to the implementation of "Pod IP unchanged" by network components. For example, flannel can only support the same Node to keep the Pod IP unchanged.\nHowever, the most important feature of K8S scheduling is "uncertainty", so "how to ensure that Pods are rebuilt and scheduled to the same Node" is the problem that PersistentPodState solves.'}),"\n",(0,s.jsxs)(t.p,{children:["Also you can add the annotations below on your StatefulSet or Advanced StatefulSet, to let Kruise automatically create a ",(0,s.jsx)(t.code,{children:"PersistentPodState"})," object for the StatefulSet. So you don't have to create it manually."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'apiVersion: apps.kruise.io/v1alpha1\nkind: StatefulSet\nmetadata:\n  annotations:\n    # auto generate PersistentPodState\n    kruise.io/auto-generate-persistent-pod-state: "true"\n    # preferred node affinity, As follows, Pod rebuild will preferred deployment to the same node\n    kruise.io/preferred-persistent-topology: kubernetes.io/hostname[,other node labels]\n    # required node affinity, As follows, Pod rebuild will force deployment to the same zone\n    kruise.io/required-persistent-topology: failure-domain.beta.kubernetes.io/zone[,other node labels]\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"2-cloneset-percentage-partition-calculation-changed-breaking-and-a-new-field-in-its-status",children:["2. CloneSet percentage partition calculation changed (",(0,s.jsx)(t.strong,{children:"breaking"}),"), and a new field in its status"]}),"\n",(0,s.jsxs)(t.p,{children:["Previously, CloneSet calculates its ",(0,s.jsx)(t.code,{children:"partition"})," with round up if it is a percentage value, which means\neven you set ",(0,s.jsx)(t.code,{children:"partition"})," to be a percentage less than ",(0,s.jsx)(t.code,{children:"100%"}),", it might update no Pods to the new revision.\nFor example, the real partition of a CloneSet with ",(0,s.jsx)(t.code,{children:"replicas=8"})," and ",(0,s.jsx)(t.code,{children:"partition=90%"})," will be calculated as\n",(0,s.jsx)(t.code,{children:"8"})," because of ",(0,s.jsx)(t.code,{children:"8 * 90%"})," with round up, so it will not update any Pod.\nThis is a little confused, especially when we are using a rollout component like Kruise Rollout or Argo."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["So since v1.2, CloneSet will make sure there is at lease one Pod should be updated when ",(0,s.jsx)(t.code,{children:"partition"})," is a percentage less than ",(0,s.jsx)(t.code,{children:"100%"}),", unless the CloneSet has ",(0,s.jsx)(t.code,{children:"replicas <= 1"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"However, it might be difficult for users to understand this arithmetic, but they have to known the expected\nupdated number of Pods after a percentage partition was set."}),"\n",(0,s.jsxs)(t.p,{children:["So we also provide a new field ",(0,s.jsx)(t.code,{children:"expectedUpdatedReplicas"})," in CloneSet status, which directly shows the\nexpected updated number of Pods based on the given ",(0,s.jsx)(t.code,{children:"partition"}),".\nUsers only have to compare ",(0,s.jsx)(t.code,{children:"status.updatedReplicas >= status.expectedUpdatedReplicas"}),"\nto decide whether their CloneSet has finished rolling out new revision under partition restriction or not."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: CloneSet\nspec:\n  replicas: 8\n  updateStrategy:\n    partition: 90%\nstatus:\n  replicas: 8\n  expectedUpdatedReplicas: 1\n  updatedReplicas: 1\n  updatedReadyReplicas: 1\n"})}),"\n",(0,s.jsx)(t.h3,{id:"3-able-to-mark-pod-not-ready-for-lifecycle-hook",children:"3. Able to mark Pod not-ready for lifecycle hook"}),"\n",(0,s.jsx)(t.p,{children:"Kruise has already provided lifecycle hook in previous versions. CloneSet and Advanced StatefulSet support both\nPreDelete and InPlaceUpdate hooks, while Advanced DaemonSet only supports PreDelete hook."}),"\n",(0,s.jsx)(t.p,{children:"Previously, the hooks only pause the operation and allow users to do something\n(for example remove pod from service endpoints) during Pod deleting and before/after in-place update.\nBut the Pod is probably Ready during the hook state, so that removing it from some custom service implementation\nmay break the rule of Kubernetes that we'd better only remove NotReady Pods from the endpoints."}),"\n",(0,s.jsxs)(t.p,{children:["So that a new field has been added into the lifecycle hook, ",(0,s.jsx)(t.code,{children:"markPodNotReady"})," indicates the hooked Pod should be\nmarked as NotReady or not."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'type LifecycleStateType string\n\n// Lifecycle contains the hooks for Pod lifecycle.\ntype Lifecycle struct \n    // PreDelete is the hook before Pod to be deleted. \n    PreDelete *LifecycleHook `json:"preDelete,omitempty"` \n    // InPlaceUpdate is the hook before Pod to update and after Pod has been updated. \n    InPlaceUpdate *LifecycleHook `json:"inPlaceUpdate,omitempty"`\n}\n\ntype LifecycleHook struct {\n    LabelsHandler     map[string]string `json:"labelsHandler,omitempty"`\n    FinalizersHandler []string          `json:"finalizersHandler,omitempty"`\n\t\n    /**********************  FEATURE STATE: 1.2.0 ************************/\n    // MarkPodNotReady = true means:\n    // - Pod will be set to \'NotReady\' at preparingDelete/preparingUpdate state.\n    // - Pod will be restored to \'Ready\' at Updated state if it was set to \'NotReady\' at preparingUpdate state.\n    // Default to false.\n    MarkPodNotReady bool `json:"markPodNotReady,omitempty"`\n    /*********************************************************************/\t\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["For PreDelete hook, it will set Pod to be NotReady during PreparingDelete state if ",(0,s.jsx)(t.code,{children:"markPodNotReady"})," is true,\nand the Pod can not be changed back to normal even if the ",(0,s.jsx)(t.code,{children:"replicas"})," is increased again."]}),"\n",(0,s.jsxs)(t.p,{children:["For InPlaceUpdate hook, it will set Pod to be NotReady during PreparingUpdate state if ",(0,s.jsx)(t.code,{children:"markPodNotReady"})," is true,\nand the NotReady condition will be removed during Updated state."]}),"\n",(0,s.jsx)(t.h3,{id:"4-podunavailablebudget-supports-any-custom-workloads-and-performance-optimization",children:"4. PodUnavailableBudget supports any custom workloads and performance optimization"}),"\n",(0,s.jsx)(t.p,{children:"Kubernetes offers PodDisruptionBudget to help users run highly available applications even when you introduce frequent voluntary disruptions,\nbut it can only constrain the voluntary disruption triggered by the Eviction API."}),"\n",(0,s.jsx)(t.p,{children:"In voluntary disruption scenarios, PodUnavailableBudget can achieve the effect of preventing application disruption or SLA degradation, which greatly improves the high availability of application services.\nIt can not only protect application Pods from eviction but also deletion, in-place update and other operations that could make Pods not ready."}),"\n",(0,s.jsx)(t.p,{children:"Previously, PodUnavailableBudget only supports some specific workloads like CloneSet and Deployment. But it can not recognize unknown workloads that\nmay be defined by users themself."}),"\n",(0,s.jsx)(t.p,{children:"Since v1.2 release, PodUnavailableBudget has supported any custom workloads to protect their Pods from unavailable operations.\nAll you have to do is to declare scale subresource for those custom workloads."}),"\n",(0,s.jsx)(t.p,{children:"It looks like this in CRD:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"    subresources:\n      scale:\n        labelSelectorPath: .status.labelSelector\n        specReplicasPath: .spec.replicas\n        statusReplicasPath: .status.replicas\n"})}),"\n",(0,s.jsx)(t.p,{children:"But if you are using kubebuilder or operator-sdk to generate your project, one line comment on your workload struct will be fine:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"// +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.labelSelector\n"})}),"\n",(0,s.jsx)(t.p,{children:"Besides, PodUnavailableBudget also optimizes its performance for large-scale clusters by disable DeepCopy from client list."}),"\n",(0,s.jsx)(t.h3,{id:"5-other-changes",children:"5. Other changes"}),"\n",(0,s.jsxs)(t.p,{children:["For more changes, their authors and commits, you can read the ",(0,s.jsx)(t.a,{href:"https://github.com/openkruise/kruise/releases",children:"Github release"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"get-involved",children:"Get Involved"}),"\n",(0,s.jsxs)(t.p,{children:["Welcome to get involved with OpenKruise by joining us in Github/Slack/DingTalk/WeChat.\nHave something you\u2019d like to broadcast to our community?\nShare your voice at our ",(0,s.jsx)(t.a,{href:"https://shimo.im/docs/gXqmeQOYBehZ4vqo",children:"Bi-weekly community meeting (Chinese)"}),", or through the channels below:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Join the community on ",(0,s.jsx)(t.a,{href:"https://kubernetes.slack.com/channels/openkruise",children:"Slack"})," (English)."]}),"\n",(0,s.jsxs)(t.li,{children:["Join the community on DingTalk: Search GroupID ",(0,s.jsx)(t.code,{children:"23330762"})," (Chinese)."]}),"\n",(0,s.jsxs)(t.li,{children:["Join the community on WeChat (new): Search User ",(0,s.jsx)(t.code,{children:"openkruise"})," and let the robot invite you (Chinese)."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},81268:e=>{e.exports=JSON.parse('{"permalink":"/blog/openkruise-1.2","editUrl":"https://github.com/openkruise/openkruise.io/edit/master/blog/2022-06-07-release-1.2.md","source":"@site/blog/2022-06-07-release-1.2.md","title":"OpenKruise v1.2, new PersistentPodState feature to achieve IP retention","description":"We\u2019re pleased to announce the release of OpenKruise 1.2, which is a CNCF Sandbox level project.","date":"2022-06-07T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"}],"readingTime":7.075,"hasTruncateMarker":false,"authors":[{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp","page":null}],"frontMatter":{"slug":"openkruise-1.2","title":"OpenKruise v1.2, new PersistentPodState feature to achieve IP retention","authors":["FillZpp"],"tags":["release"]},"unlisted":false,"prevItem":{"title":"OpenKruise v1.3, New Custom Pod Probe Capabilities and Significant Performance Improvements for Large-Scale Clusters","permalink":"/blog/openkruise-1.3"},"nextItem":{"title":"OpenKruise v1.1, features enhanced, improve performance in large-scale clusters","permalink":"/blog/openkruise-1.1"}}')}}]);