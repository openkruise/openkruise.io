"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[6036],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},62176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var i=t(76744),a=t(74848),o=t(28453);const r={slug:"openkruise-1.4",title:"OpenKruise V1.4 Release, New Job Sidecar Terminator Capability",authors:["zmberg"],tags:["release"]},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Upgrade Notice",id:"upgrade-notice",level:2},{value:"2. New Job Sidecar Terminator Capability",id:"2-new-job-sidecar-terminator-capability",level:2},{value:"Pods on real nodes",id:"pods-on-real-nodes",level:3},{value:"Pods on virtual nodes",id:"pods-on-virtual-nodes",level:3},{value:"Step 1: Prepare a fast exit image",id:"step-1-prepare-a-fast-exit-image",level:4},{value:"Step 2: Configure the special image in the Sidecar environment variable",id:"step-2-configure-the-special-image-in-the-sidecar-environment-variable",level:4},{value:"Notice",id:"notice",level:2},{value:"Advanced Workload Improvement",id:"advanced-workload-improvement",level:2},{value:"CloneSet Optimization Performance: New FeatureGate CloneSetEventHandlerOptimization",id:"cloneset-optimization-performance-new-featuregate-cloneseteventhandleroptimization",level:3},{value:"CloneSet New disablePVCReuse Field",id:"cloneset-new-disablepvcreuse-field",level:3},{value:"CloneSet New PreNormal Lifecycle",id:"cloneset-new-prenormal-lifecycle",level:3},{value:"4. Enhanced Operations Improvement",id:"4-enhanced-operations-improvement",level:2},{value:"ContainerRestart New forceRecreate Field",id:"containerrestart-new-forcerecreate-field",level:3},{value:"ImagePullJob Support Attach metadata into cri interface",id:"imagepulljob-support-attach-metadata-into-cri-interface",level:3},{value:"Get Involved",id:"get-involved",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["OpenKruise (",(0,a.jsx)(n.a,{href:"https://github.com/openkruise/kruise",children:"https://github.com/openkruise/kruise"}),") is an open-source cloud-native application automation management suite. It is also a current incubating project hosted by the Cloud Native Computing Foundation (CNCF). It is a standard extension component based on Kubernetes that is widely used in production of internet scale company. It also closely follows upstream community standards and adapts to the technical improvement and best practices for internet-scale scenarios."]}),"\n",(0,a.jsxs)(n.p,{children:["OpenKruise has released the latest version v1.4 on March 31, 2023 (",(0,a.jsx)(n.a,{href:"https://github.com/openkruise/kruise/blob/master/CHANGELOG.md",children:"ChangeLog"}),"), with the addition of the Job Sidecar Terminator feature. This article provides a comprehensive overview of the new version."]}),"\n",(0,a.jsx)(n.h2,{id:"upgrade-notice",children:"Upgrade Notice"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"To facilitate the use of Kruise's enhanced capabilities, some stable capabilities have been enabled by default, including ResourcesDeletionProtection, WorkloadSpread, PodUnavailableBudgetDeleteGate, InPlaceUpdateEnvFromMetadata, StatefulSetAutoDeletePVC, and PodProbeMarkerGate. Most of these capabilities require special configuration to take effect, so enabling them by default generally has no impact on existing clusters. If you do not want to use some of these features, you can turn them off during the upgrade process."}),"\n",(0,a.jsx)(n.li,{children:"The leader election method for Kruise-Manager has been migrated from configmaps to configmapsleases to prepare for future migration to the leases method. In addition, this is an officially provided smooth upgrade method that will not affect existing clusters."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"2-new-job-sidecar-terminator-capability",children:"2. New Job Sidecar Terminator Capability"}),"\n",(0,a.jsx)(n.p,{children:"In Kubernetes, for Job workloads, it is commonly desired that when the main container completes its task and terminates, the Pod should enter a completed state. However, when these Pods have Long-Running Sidecar containers, the Sidecar container cannot terminate itself after the main container has exited, causing the Pod to remain in an incomplete state. The community's common solution to this problem usually involves modifying both the Main and Sidecar containers to use Volume sharing to achieve the effect of the Sidecar container exiting after the Main container has completed."}),"\n",(0,a.jsx)(n.p,{children:"While the community's solution can solve this problem, it requires modification of the containers, especially for commonly used Sidecar containers, which incurs high costs for modification and maintenance."}),"\n",(0,a.jsx)(n.p,{children:"To address this, we have added a controller called SidecarTerminator to Kruise. This controller is specifically designed to listen for completion status of the main container in this scenario and select an appropriate time to terminate the Sidecar container in the Pod, without requiring intrusive modification of the Main and Sidecar containers."}),"\n",(0,a.jsx)(n.h3,{id:"pods-on-real-nodes",children:"Pods on real nodes"}),"\n",(0,a.jsx)(n.p,{children:"For pods running on regular nodes, it is very easy to use this feature since Kruise daemon can  be installed. Users just need to add a special env to identify the target sidecar container in the pod, and the controller will use the ContainerRecreateRequest(CRR) capability provided by Kruise Daemon to terminate these sidecar containers at the appropriate time."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'kind: Job\nspec:\n  template:\n    spec:\n      containers:\n      - name: sidecar\n        env:\n        - name: KRUISE_TERMINATE_SIDECAR_WHEN_JOB_EXIT\n          value: "true"\n      - name: main\n      ...\n'})}),"\n",(0,a.jsx)(n.h3,{id:"pods-on-virtual-nodes",children:"Pods on virtual nodes"}),"\n",(0,a.jsx)(n.p,{children:"For some platforms that provide Serverless containers, such as ECI or Fargate, their pods can only run on virtual nodes such as Virtual-Kubelet. However, Kruise Daemon cannot be deployed and work on these virtual nodes, which makes it impossible to use the CRR capability to terminate containers."}),"\n",(0,a.jsx)(n.p,{children:"Fortunately, we can use the Pod in-place upgrade mechanism provided by native Kubernetes to achieve the same goal: just construct a special image whose only purpose is to make the container exit quickly once started. In this way, when exiting the sidecar, just replace the original sidecar image with the fast exit image to achieve the purpose of exiting the sidecar."}),"\n",(0,a.jsx)(n.h4,{id:"step-1-prepare-a-fast-exit-image",children:"Step 1: Prepare a fast exit image"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The image only needs to have a very simple logic: when the container of this image starts, it exits directly with an exit code of 0."}),"\n",(0,a.jsx)(n.li,{children:"The image needs to be compatible with the commands and args of the original sidecar image to prevent errors when the container starts."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"step-2-configure-the-special-image-in-the-sidecar-environment-variable",children:"Step 2: Configure the special image in the Sidecar environment variable"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'kind: Job\nspec:\n  template:\n    spec:\n      containers:\n      - name: sidecar\n        env:\n        - name: KRUISE_TERMINATE_SIDECAR_WHEN_JOB_EXIT_WITH_IMAGE\n          value: "example/quick-exit:v1.0.0"\n      - name: main\n      ...\n'})}),"\n",(0,a.jsxs)(n.p,{children:['Replace "example/quick-exit',":v1",'.0.0" with the fast exit image that you have prepared in step 1.']}),"\n",(0,a.jsx)(n.h2,{id:"notice",children:"Notice"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The sidecar container must be able to respond to the SIGTERM signal, and when it receives this signal, the entrypoint process needs to exit (that is, the sidecar container needs to exit), and the exit code should be 0."}),"\n",(0,a.jsx)(n.li,{children:"This feature applies to any Pod managed by a Job type Workload, as long as their RestartPolicy is Never/OnFailure."}),"\n",(0,a.jsxs)(n.li,{children:["Containers with the environment variable KRUISE_TERMINATE_SIDECAR_WHEN_JOB_EXIT will be treated as sidecar containers, while other containers will be treated as main containers. The sidecar container will only be terminated after all main containers have completed:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'Under the Never restart policy, once the main container exits, it will be considered "completed".'}),"\n",(0,a.jsx)(n.li,{children:'Under the OnFailure restart policy, the exit code of the main container must be 0 to be considered "completed".'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["In Pods on real nodes mode, ",(0,a.jsx)(n.code,{children:"KRUISE_TERMINATE_SIDECAR_WHEN_JOB_EXIT"})," has a higher priority than ",(0,a.jsx)(n.code,{children:"KRUISE_TERMINATE_SIDECAR_WHEN_JOB_EXIT_WITH_IMAGE"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-workload-improvement",children:"Advanced Workload Improvement"}),"\n",(0,a.jsx)(n.h3,{id:"cloneset-optimization-performance-new-featuregate-cloneseteventhandleroptimization",children:"CloneSet Optimization Performance: New FeatureGate CloneSetEventHandlerOptimization"}),"\n",(0,a.jsx)(n.p,{children:"Currently, whether it's a change in the state or metadata of a Pod,, the Pod Update event will trigger the CloneSet reconcile logic. CloneSet Reconcile is configured with three workers by default, which is not a problem for smaller cluster scenarios."}),"\n",(0,a.jsx)(n.p,{children:"However, for larger or busy clusters, these unneccesary reconciles will block the true CloneSet reconcile and delay changes such as rolling updates of CloneSet. To solve this problem, you can turn on the feature-gate CloneSetEventHandlerOptimization to reduce some unnecessary enqueueing of reconciles."}),"\n",(0,a.jsx)(n.h3,{id:"cloneset-new-disablepvcreuse-field",children:"CloneSet New disablePVCReuse Field"}),"\n",(0,a.jsx)(n.p,{children:"If a Pod is directly deleted or evicted by other controller or user, the PVCs associated with the Pod still remain. When the CloneSet controller creates new Pods, it will reuse existing PVCs."}),"\n",(0,a.jsxs)(n.p,{children:["However, if the Node where the Pod is located experiences a failure, reusing existing PVCs may cause the new Pod to fail to start. For details, please refer to  issue 1099. To solve this problem, you can set the ",(0,a.jsx)(n.strong,{children:"disablePVCReuse=true"})," field. After the Pod is evicted or deleted, the PVCs associated with the Pod will be automatically deleted and will no longer be reused."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: CloneSet\nspec:\n  ...\n  replicas: 4\n  scaleStrategy:\n    disablePVCReuse: true\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cloneset-new-prenormal-lifecycle",children:"CloneSet New PreNormal Lifecycle"}),"\n",(0,a.jsx)(n.p,{children:"CloneSet currently supports two lifecycle hooks, PreparingUpdate and PreparingDelete, which are used for graceful application termination. For details, please refer to the Community Documentation. In order to support graceful application deployment, a new state called PreNormal has been added, as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps.kruise.io/v1alpha1\nkind: CloneSet\nspec:\n  # define with finalizer\n  lifecycle:\n    preNormal:\n      finalizersHandler:\n      - example.io/unready-blocker\n\n  # or define with label\n  # lifecycle:\n  #   preNormal:\n  #     labelsHandler:\n  #       example.io/block-unready: "true"\n'})}),"\n",(0,a.jsx)(n.p,{children:"When CloneSet creates a Pod (including normal scaling and upgrades):"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'The Pod will only be considered "Available" and enter the "Normal" state if it meets the definition of the PreNormal hook.'}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This is useful for some post-checks when creating Pods, such as checking if the Pod has been mounted to the SLB backend, so as to avoid traffic loss caused by new instance mounting failure after the old instance is destroyed during rolling upgrade."}),"\n",(0,a.jsx)(n.h2,{id:"4-enhanced-operations-improvement",children:"4. Enhanced Operations Improvement"}),"\n",(0,a.jsx)(n.h3,{id:"containerrestart-new-forcerecreate-field",children:"ContainerRestart New forceRecreate Field"}),"\n",(0,a.jsxs)(n.p,{children:["When creating a ",(0,a.jsx)(n.a,{href:"https://openkruise.io/docs/user-manuals/containerrecreaterequest",children:"CRR"})," resource, if the container is in the process of starting up, the CRR will not restart the container again. If you want to force a container restart, you can enable the following field:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: ContainerRecreateRequest\nspec:\n  ...\n  strategy:\n    forceRecreate: true\n"})}),"\n",(0,a.jsx)(n.h3,{id:"imagepulljob-support-attach-metadata-into-cri-interface",children:"ImagePullJob Support Attach metadata into cri interface"}),"\n",(0,a.jsx)(n.p,{children:"When Kubelet creates a Pod, Kubelet will attach metadata to the container runtime using CRI interface. The image repository can use this metadata information to identify the business related to the starting container. Some container actions of low business value can be degraded to protect the overloaded repository."}),"\n",(0,a.jsx)(n.p,{children:"OpenKruise's imagePullJob also supports similar capabilities, as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps.kruise.io/v1alpha1\nkind: ImagePullJob\nspec:\n  ...\n  image: nginx:1.9.1\n  sandboxConfig:\n    annotations:\n      io.kubernetes.image.metrics.tags: "cluster=cn-shanghai"\n    labels:\n      io.kubernetes.image.app: "foo"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"get-involved",children:"Get Involved"}),"\n",(0,a.jsxs)(n.p,{children:["Welcome to get involved with OpenKruise by joining us in Github/Slack/DingTalk/WeChat.\nHave something you\u2019d like to broadcast to our community?\nShare your voice at our ",(0,a.jsx)(n.a,{href:"https://shimo.im/docs/gXqmeQOYBehZ4vqo",children:"Bi-weekly community meeting (Chinese)"}),", or through the channels below:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Join the community on ",(0,a.jsx)(n.a,{href:"https://kubernetes.slack.com/channels/openkruise",children:"Slack"})," (English)."]}),"\n",(0,a.jsxs)(n.li,{children:["Join the community on DingTalk: Search GroupID ",(0,a.jsx)(n.code,{children:"23330762"})," (Chinese)."]}),"\n",(0,a.jsxs)(n.li,{children:["Join the community on WeChat (new): Search User ",(0,a.jsx)(n.code,{children:"openkruise"})," and let the robot invite you (Chinese)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},76744:e=>{e.exports=JSON.parse('{"permalink":"/blog/openkruise-1.4","editUrl":"https://github.com/openkruise/openkruise.io/edit/master/blog/2023-04-18-release-1.4.md","source":"@site/blog/2023-04-18-release-1.4.md","title":"OpenKruise V1.4 Release, New Job Sidecar Terminator Capability","description":"OpenKruise (https://github.com/openkruise/kruise) is an open-source cloud-native application automation management suite. It is also a current incubating project hosted by the Cloud Native Computing Foundation (CNCF). It is a standard extension component based on Kubernetes that is widely used in production of internet scale company. It also closely follows upstream community standards and adapts to the technical improvement and best practices for internet-scale scenarios.","date":"2023-04-18T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"}],"readingTime":7,"hasTruncateMarker":false,"authors":[{"name":"Mingshan Zhao","title":"Member of OpenKruise","url":"https://github.com/zmberg","imageURL":"https://github.com/zmberg.png","key":"zmberg","page":null}],"frontMatter":{"slug":"openkruise-1.4","title":"OpenKruise V1.4 Release, New Job Sidecar Terminator Capability","authors":["zmberg"],"tags":["release"]},"unlisted":false,"prevItem":{"title":"A Flexible and Configurable Serverless Elastic Solution at the Workload Level","permalink":"/blog/elastic"},"nextItem":{"title":"OpenKruise v1.3, New Custom Pod Probe Capabilities and Significant Performance Improvements for Large-Scale Clusters","permalink":"/blog/openkruise-1.3"}}')}}]);