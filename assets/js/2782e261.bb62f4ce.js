"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[4858],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},65863:e=>{e.exports=JSON.parse('{"permalink":"/blog/openkruise-1.0","editUrl":"https://github.com/openkruise/openkruise.io/edit/master/blog/2021-12-13-release-1.0.md","source":"@site/blog/2021-12-13-release-1.0.md","title":"OpenKruise v1.0, Reaching New Peaks of application automation","description":"We\u2019re pleased to announce the release of Kubernetes 1.0, which is a CNCF Sandbox level project.","date":"2021-12-13T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"}],"readingTime":6.505,"hasTruncateMarker":false,"authors":[{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp","page":null}],"frontMatter":{"slug":"openkruise-1.0","title":"OpenKruise v1.0, Reaching New Peaks of application automation","authors":["FillZpp"],"tags":["release"]},"unlisted":false,"prevItem":{"title":"OpenKruise v1.1, features enhanced, improve performance in large-scale clusters","permalink":"/blog/openkruise-1.1"},"nextItem":{"title":"WorkloadSpread - Interpretation for OpenKruise v0.10.0 new feature","permalink":"/blog/workloadspread"}}')},81509:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/inplace-update-comparation-fc948df195e332f578d4967c34b0c3d3.png"},86016:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/features-en-659914e95b0df596a344f733aa198993.png"},94494:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=i(65863),t=i(74848),r=i(28453);const o={slug:"openkruise-1.0",title:"OpenKruise v1.0, Reaching New Peaks of application automation",authors:["FillZpp"],tags:["release"]},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"What&#39;s new?",id:"whats-new",level:2},{value:"1. InPlace Update for environments",id:"1-inplace-update-for-environments",level:3},{value:"2. Distribute resources over multiple namespaces",id:"2-distribute-resources-over-multiple-namespaces",level:3},{value:"3. Container launch priority",id:"3-container-launch-priority",level:3},{value:"4. <code>kubectl-kruise</code> commandline tool",id:"4-kubectl-kruise-commandline-tool",level:3},{value:"5. Other changes",id:"5-other-changes",level:3},{value:"Get Involved",id:"get-involved",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"We\u2019re pleased to announce the release of Kubernetes 1.0, which is a CNCF Sandbox level project."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://openkruise.io",children:"OpenKruise"})," is an extended component suite for Kubernetes, which mainly focuses on application automations, such as deployment, upgrade, ops and availability protection. Mostly features provided by OpenKruise are built primarily based on CRD extensions. They can work in pure Kubernetes clusters without any other dependences."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"openkruise-features|center|450x400",src:i(86016).A+"",width:"6534",height:"5442"})}),"\n",(0,t.jsx)(n.p,{children:"Overall, OpenKruise currently provides features in these areas:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application workloads"}),": Enhanced strategies of deploy and upgrade for stateless/stateful/daemon applications, such as in-place update, canary/flowing upgrade."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sidecar container management"}),": supports to define sidecar container alone, which means it can inject sidecar containers, upgrade them with no effect on application containers and even hot upgrade."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced operations"}),": such as restart containers in-place, pre-download images on specific nodes, keep containers launch priority in a Pod, distribute one resource to multiple namespaces."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application availability protection"}),": protect availability for applications that deployed in Kubernetes."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"whats-new",children:"What's new?"}),"\n",(0,t.jsx)(n.h3,{id:"1-inplace-update-for-environments",children:"1. InPlace Update for environments"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Author: ",(0,t.jsx)(n.a,{href:"https://github.com/FillZpp",children:"@FillZpp"})]})}),"\n",(0,t.jsxs)(n.p,{children:["OpenKruise has supported ",(0,t.jsx)(n.strong,{children:"InPlace Update"})," since very early version, mostly for workloads like CloneSet and Advanced StatefulSet. Comparing to recreate Pods during upgrade, in-place update only has to modify the fields in existing Pods."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"inplace-update-comparation|center|450x400",src:i(81509).A+"",width:"2080",height:"1754"})}),"\n",(0,t.jsxs)(n.p,{children:["As the picture shows above, we only modify the ",(0,t.jsx)(n.code,{children:"image"})," field in Pod during in-place update. So that:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Avoid additional cost of ",(0,t.jsx)(n.em,{children:"scheduling"}),", ",(0,t.jsx)(n.em,{children:"allocating IP"}),", ",(0,t.jsx)(n.em,{children:"allocating and mounting volumes"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Faster image pulling, because of we can re-use most of image layers pulled by the old image and only to pull several new layers."}),"\n",(0,t.jsx)(n.li,{children:"When a container is in-place updating, the other containers in Pod will not be affected and remain running."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["However, OpenKruise only supports to in-place update ",(0,t.jsx)(n.code,{children:"image"})," field in Pod and has to recreate Pods if other fields need to update. All the way through, more and more users hope OpenKruise could support in-place update more fields such as ",(0,t.jsx)(n.code,{children:"env"})," -- which is hard to implement, for it is limited by kube-apiserver."]}),"\n",(0,t.jsx)(n.p,{children:"After our unremitting efforts, OpenKruise finally support in-place update environments via Downward API since version v1.0. Take the CloneSet YAML below as an example, user has to set the configuration in annotation and write a env from it. After that, he just needs to modify the annotation value when changing the configuration. Kruise will restart all containers with env from the annotation in such Pod to enable the new configuration."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: CloneSet\nmetadata:\n  ...\nspec:\n  replicas: 1\n  template:\n    metadata:\n      annotations:\n        app-config: \"... the real env value ...\"\n    spec:\n      containers:\n      - name: app\n        env:\n        - name: APP_CONFIG\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.annotations['app-config']\n  updateStrategy:\n    type: InPlaceIfPossible\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["At the same time, we have removed the limit of ",(0,t.jsx)(n.code,{children:"imageID"})," for in-place update, which means you can update a new image with the same imageID to the old image."]})}),"\n",(0,t.jsxs)(n.p,{children:["For more details please read ",(0,t.jsx)(n.a,{href:"/docs/core-concepts/inplace-update",children:"documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"2-distribute-resources-over-multiple-namespaces",children:"2. Distribute resources over multiple namespaces"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Author: ",(0,t.jsx)(n.a,{href:"https://github.com/veophi",children:"@veophi"})]})}),"\n",(0,t.jsx)(n.p,{children:"For the scenario, where the namespace-scoped resources such as Secret and ConfigMap need to be distributed or synchronized to different namespaces, the native k8s currently only supports manual distribution and synchronization by users one-by-one, which is very inconvenient."}),"\n",(0,t.jsx)(n.p,{children:"Typical examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When users want to use the imagePullSecrets capability of SidecarSet, they must repeatedly create corresponding Secrets in relevant namespaces, and ensure the correctness and consistency of these Secret configurations;"}),"\n",(0,t.jsxs)(n.li,{children:["When users want to configure some ",(0,t.jsx)(n.strong,{children:"common"})," environment variables, they probably need to distribute ConfigMaps to multiple namespaces, and the subsequent modifications of these ConfigMaps might require synchronization among these namespaces."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Therefore, in the face of these scenarios that require the resource distribution and ",(0,t.jsx)(n.strong,{children:"continuously synchronization across namespaces"}),", we provide a tool, namely ",(0,t.jsx)(n.strong,{children:"ResourceDistribution"}),", to do this automatically."]}),"\n",(0,t.jsxs)(n.p,{children:["Currently, ResourceDistribution supports the two kind resources --- ",(0,t.jsx)(n.strong,{children:"Secret & ConfigMap"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps.kruise.io/v1alpha1\nkind: ResourceDistribution\nmetadata:\n  name: sample\nspec:\n  resource:\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: game-demo\n    data:\n      ...\n  targets:\n  \tnamespaceLabelSelector:\n      ...\n    # or includedNamespaces, excludedNamespaces\n"})}),"\n",(0,t.jsxs)(n.p,{children:["So you can see ResourceDistribution is a kind of ",(0,t.jsx)(n.strong,{children:"cluster-scoped CRD"}),", which is mainly composed of two fields: ",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"resource"})," and ",(0,t.jsx)(n.code,{children:"targets"})]}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"resource"})," is a ",(0,t.jsx)(n.strong,{children:"complete"})," and ",(0,t.jsx)(n.strong,{children:"correct"})," resource structure in YAML style."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"targets"})," indicates the target namespaces that the resource should be distributed into."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details please read ",(0,t.jsx)(n.a,{href:"/docs/user-manuals/resourcedistribution",children:"documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"3-container-launch-priority",children:"3. Container launch priority"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Author: ",(0,t.jsx)(n.a,{href:"https://github.com/Concurrensee",children:"@Concurrensee"})]})}),"\n",(0,t.jsx)(n.p,{children:"Containers in a same Pod in it might have dependence, which means the application in one container runs depending on another container. For example:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Container A has to start first. Container B can start only if A is already running."}),"\n",(0,t.jsx)(n.li,{children:"Container B has to exit first. Container A can stop only if B has already exited."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Currently, the sequences of containers start and stop are controlled by Kubelet.\nKubernetes used to have a KEP, which plans to add a type field for container to identify the priority of start and stop. However, it has been refused because of sig-node thought it may bring a huge change to code."}),"\n",(0,t.jsxs)(n.p,{children:["So OpenKruise provides a feature named ",(0,t.jsx)(n.strong,{children:"Container Launch Priority"}),", which helps user control the sequence of containers start in a Pod."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["User only has to put the annotation ",(0,t.jsx)(n.code,{children:"apps.kruise.io/container-launch-priority: Ordered"})," in a Pod, then Kruise will ensure all containers in this Pod should be started by the sequence of ",(0,t.jsx)(n.code,{children:"pod.spec.containers"})," list."]}),"\n",(0,t.jsxs)(n.li,{children:["If you want to customize the launch sequence, you can add ",(0,t.jsx)(n.code,{children:"KRUISE_CONTAINER_PRIORITY"})," environment in container. The range of the value is ",(0,t.jsx)(n.code,{children:"[-2147483647, 2147483647]"}),". The container with higher priority will be guaranteed to start before the others with lower priority."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more details please read ",(0,t.jsx)(n.a,{href:"/docs/user-manuals/containerlaunchpriority",children:"documentation"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"4-kubectl-kruise-commandline-tool",children:["4. ",(0,t.jsx)(n.code,{children:"kubectl-kruise"})," commandline tool"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Author: ",(0,t.jsx)(n.a,{href:"https://github.com/hantmac",children:"@hantmac"})]})}),"\n",(0,t.jsxs)(n.p,{children:["OpenKruise used to provide SDK like ",(0,t.jsx)(n.code,{children:"kruise-api"})," and ",(0,t.jsx)(n.code,{children:"client-java"})," for some programming languages, which can be imported into users' projects. On the other hand, some users also need to operate the workload resources with commandline in test environment."]}),"\n",(0,t.jsxs)(n.p,{children:["However, the ",(0,t.jsx)(n.code,{children:"rollout"}),", ",(0,t.jsx)(n.code,{children:"set image"})," commands in original ",(0,t.jsx)(n.code,{children:"kubectl"})," can only work for built-in workloads, such as Deployment and StatefulSet."]}),"\n",(0,t.jsxs)(n.p,{children:["So, OpenKruise now provide a commandline tool named ",(0,t.jsx)(n.code,{children:"kubectl-kruise"}),", which is a standard plugin of ",(0,t.jsx)(n.code,{children:"kubectl"})," and can work for OpenKruise workload types."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# rollout undo cloneset\n$ kubectl kruise rollout undo cloneset/nginx\n\n#  rollout status advanced statefulset\n$ kubectl kruise rollout status statefulsets.apps.kruise.io/sts-demo\n\n# set image of a cloneset\n$ kubectl kruise set image cloneset/nginx busybox=busybox nginx=nginx:1.9.1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details please read ",(0,t.jsx)(n.a,{href:"/docs/cli-tool/kubectl-plugin",children:"documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"5-other-changes",children:"5. Other changes"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CloneSet:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add ",(0,t.jsx)(n.code,{children:"maxUnavailable"})," field in ",(0,t.jsx)(n.code,{children:"scaleStrategy"})," to support rate limiting of scaling up."]}),"\n",(0,t.jsx)(n.li,{children:"Mark revision stable when all pods updated to it, won't wait all pods to be ready."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"WorkloadSpread:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Manage the pods that have created before WorkloadSpread."}),"\n",(0,t.jsx)(n.li,{children:"Optimize the update and retry logic for webhook injection."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advanced DaemonSet:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Support in-place update Daemon Pod."}),"\n",(0,t.jsx)(n.li,{children:"Support progressive annotation to control if pods creation should be limited by partition."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"SidecarSet:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fix SidecarSet filter active pods."}),"\n",(0,t.jsxs)(n.li,{children:["Add ",(0,t.jsx)(n.code,{children:"SourceContainerNameFrom"})," and ",(0,t.jsx)(n.code,{children:"EnvNames"})," fields in ",(0,t.jsx)(n.code,{children:"transferenv"})," to make the container name flexible and the list shorter."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"PodUnavailableBudget:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add no pub-protection annotation to skip validation for the specific Pod."}),"\n",(0,t.jsx)(n.li,{children:"PodUnavailableBudget controller watches workload replicas changed."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"NodeImage:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add ",(0,t.jsx)(n.code,{children:"--nodeimage-creation-delay"})," flag to delay NodeImage creation after Node ready."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"UnitedDeployment:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fix pod NodeSelectorTerms length 0 when UnitedDeployment NodeSelectorTerms is nil."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Other optimization:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"kruise-daemon list and watch pods using protobuf."}),"\n",(0,t.jsx)(n.li,{children:"Export cache resync args and defaults to be 0 in chart value."}),"\n",(0,t.jsx)(n.li,{children:"Fix http checker reloading after webhook certs updated."}),"\n",(0,t.jsx)(n.li,{children:"Generate CRDs with original controller-tools and markers."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"get-involved",children:"Get Involved"}),"\n",(0,t.jsxs)(n.p,{children:["Welcome to get involved with OpenKruise by joining us in Github/Slack/DingTalk/WeChat.\nHave something you\u2019d like to broadcast to our community?\nShare your voice at our ",(0,t.jsx)(n.a,{href:"https://shimo.im/docs/gXqmeQOYBehZ4vqo",children:"Bi-weekly community meeting (Chinese)"}),", or through the channels below:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Join the community on ",(0,t.jsx)(n.a,{href:"https://kubernetes.slack.com/channels/openkruise",children:"Slack"})," (English)."]}),"\n",(0,t.jsxs)(n.li,{children:["Join the community on DingTalk: Search GroupID ",(0,t.jsx)(n.code,{children:"23330762"})," (Chinese)."]}),"\n",(0,t.jsxs)(n.li,{children:["Join the community on WeChat: Search User ",(0,t.jsx)(n.code,{children:"openkruise"})," and let the robot invite you (Chinese)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);